{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","toggle","bind","assertThisInitialized","setState","prevState","react_default","a","createElement","className","Form","FormGroup","tag","check","Label","Input","type","name","Button","onClick","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVA0EeA,cArEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAO,GAGTR,EAAKS,OAAST,EAAKS,OAAOC,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANGA,wEAUjBG,KAAKS,SAAS,SAAAC,GAAS,MAAK,CAC1BL,OAAQK,EAAUL,0CAIpB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,qCACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,IAAI,YACbN,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWE,OAAK,GACdP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOD,OAAK,GACVP,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,WAD3B,UAIFX,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWE,OAAK,GACdP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOD,OAAK,GACVP,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,WAD3B,QAIFX,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWE,OAAK,GACdP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOD,OAAK,GACVP,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,WAD3B,SAKJX,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWE,OAAK,GACdP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOD,OAAK,GACVP,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,WAD3B,SAIFX,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWE,OAAK,GACdP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOD,OAAK,GACVP,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,KAAK,QAAQC,KAAK,WAD3B,UAKJX,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,QAASxB,KAAKM,QAAtB,kBAGJK,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAQ1B,KAAKI,MAAMC,MAAOC,OAAQN,KAAKM,OAAQQ,UAAWd,KAAKJ,MAAMkB,WAC1EH,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAarB,OAAQN,KAAKM,QAA1B,oBACAK,EAAAC,EAAAC,cAACe,EAAA,EAAD,6BAEEjB,EAAAC,EAAAC,cAAA,gBAEFF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQO,MAAM,YAAYN,QAASxB,KAAKM,QAAxC,mBA9DMyB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2fe3c9b7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n  render() {\n    return (\n      <div className=\"text-center\">\n        <h1 className=\"m-3\">This test will determine your IQ!</h1>\n        <Form>\n          <FormGroup tag=\"fieldset\">\n            <legend>Is Wesley stoopid?</legend>\n            <FormGroup check>\n              <Label check>\n                <Input type=\"radio\" name=\"radio1\" /> lol.\n              </Label>\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input type=\"radio\" name=\"radio1\" /> No\n              </Label>\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input type=\"radio\" name=\"radio1\" /> No\n              </Label>\n            </FormGroup>\n          </FormGroup>\n          <FormGroup>\n            <legend>Is Zoey the best?</legend>\n            <FormGroup check>\n              <Label check>\n                <Input type=\"radio\" name=\"radio2\" /> Yes\n              </Label>\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input type=\"radio\" name=\"radio2\" /> Yes\n              </Label>\n            </FormGroup>\n          </FormGroup>\n          <FormGroup>\n            <Button onClick={this.toggle}>See your IQ!</Button>\n          </FormGroup>\n        </Form>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle}>Your IQ Results!</ModalHeader>\n          <ModalBody>\n            Congrats! Your IQ is:\n            <h1>0</h1>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.toggle}>Close</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}